# import Card from "card/card.graphql";
# import User from "user/user.graphql";
# import Category from "category/category.graphql";

scalar Date
scalar DateTime
scalar Time

enum DirectionEnum {
  ASC
  DESC
}

interface Node {
  id: ID!
  created: DateTime!
  updated: DateTime
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  cards(first: Int, after: String, sortOptions: CardSortOptionsInput): CardConnection!
  card(id: ID!): Card
  categories: [Category!]
  category(id: ID!): Category
  # Queries for the current user
  me: User
  node(id: ID!): Node
}

type Mutation {
  # card mutations
  addCard(input: CardInput): CardsUpdatedResponse!
  updateCard(id: ID!, input: CardInput): CardsUpdatedResponse!
  removeCard(id: ID!): CardsUpdatedResponse!
  # category mutations
  addCategory(input: CategoryInput): CategoryUpdatedResponse!
  updateCategory(id: ID!, input: CategoryInput): CategoryUpdatedResponse!
  removeCategory(id: ID!): CategoryUpdatedResponse!
}